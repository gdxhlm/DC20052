Linux C基础课程 第三天

【1】复习
	[1]命令
		cd
			cd /etc/
			cd /home/linux/
			cd ../..
			cd ~ 或 cd
			cd -
			cd /
			cd .
			cd ..
		touch
			touch 1.c
			touch 1.c 2.c 3.c....
		mkdir
			mkdir hello
			mkdir test list .....
			mkdir -p 1/2/3
			mkdir -m 0777 tty
		
		chmod 
			chmod 0664 a.c
			chmod 0775 hello
		cp
			cp a.c ~/hello/
			cp ./tty ./hello -r或者-a
			cp a.c ~/hello/b.c
			cp ./tty ./hello/111 -r或者-a
					
		mv
			mv a.c hello
			mv tty hello
			
			mv a.c b.c
			mv tty hello
		
		pwd
			显示当前位置
		clear
			清屏
			
		rm  
			rm 1.c
			rm hello -rf
			rm * -rf
			rm !(22.txt)
			
		cat
			cat 1.c
			
		echo 
			echo 123123123
			echo 123123123 > a.c
			echo 123123123 >> a.c
	
	[2]vim的使用
		命令行模式Esc
			yy
			5yy
			3dd
			dG
			dgg
			p
			u
			ctrl+r
			
			gg=G
			
			gg
			G
			
			/^string$
			n  N
			
		插入模式
			i I  a A  o O
		底行模式
			shift+:
			:q
			:q!
			:w
			:wq  或:x
			:wq!
			:wa
		
			:vsp a.c
			:sp b.c
			
			:n
			:set nu
			:set nonu
			:nohl
			
			:3,5y
			:3,$y
			:3,8d
			
			:%s/旧字符串/新字符串/g
			:%s/旧字符串/新字符串/
			:3,5s/旧字符串/新字符串/g
			:3,5s/旧字符串/新字符串/
			:3,$s/旧字符串/新字符串/g
			:3,$s/旧字符串/新字符串/
			
	[3]helloworld
		#include <stdio.h>  //usr/include
		
		int main()  //入口函数
		{
			//\n表示换行，刷新缓冲区
			printf("hello world\n");
			return 0;
		}

	gcc helloworld.c ---->a.out
	
	执行./a.out
	
【2】gcc编译的过程
	gcc -v  //查看编译器的版本号
	gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) 

	gcc编译出来的代码能在你的Android手机上执行吗？
	ubuntu上的gcc编译出来的代码只能够在32位的ubuntu
	上执行，它的架构是x86，不能够在手机上执行的，因为
	你的Android手机一般都是Arm。
	
	c语言中的注释
	//  单行注释
	
	/*
		多行注释
	*/
	
	#if 0
		//被注释掉了
	#else
		//没有被注释掉
	#endif
	
	1.预处理
		头文件的展开，宏的替换（#define），
		预处理的替换，删除注释部分，不会对语法
		进行检查。
		
		 gcc -E 01HelloWorld.c -o 01HelloWorld.i
	2.编译
		将预处理后的文件，编译成汇编文件，对
		语法进行检查
		
		gcc -S 01HelloWorld.i -o 01HelloWorld.s
	3.汇编
		将汇编文件编译成目标文件，没有链接库
		gcc -c 01HelloWorld.s -o 01HelloWorld.o

	4.链接
		将库链接到目标文件中，最终生成可执行文件。
		gcc 01HelloWorld.o -o 01HelloWorld


	参数的记忆方法： ESc  
	生成文件的后缀： iso

	-o    :指定生成的目标的名字
	-g    :添加调试信息
	-Wall :显示警告信息
	-On   :(n的取值0-3(优化等级)) 优化后的代码执行效率高

【3】计算机组成
	1.输入、输出
	2.总线
	3.控制器
	4.运算单元（ALU）
	5.存储设备
	
	存储设备：分为内存和外存
	
	                  ----------
	cpu ---寄存器----|		    |----内存----硬盘
					  ---cache---
	
【4】内存大小的单位	
	bit:只能用来存储一个0或1
	byte = 8bit    (byte字节)
	1Kb  = 1024byte
	1Mb   = 1024Kb
	1Gb   = 1024M = 1024*1024K = 1024*1024*1024byte
	1Tb   = 1024Gb

【5】数据类型(32位操作系统)
	基本数据类型
		字符类型
		char        1字节 
		
		整型
		short		2字节 (short int)
		int  		4字节 (int)
		long 		4字节 (long int)  
		long long   8字节 (long long int)
		
		实型（浮点类型，小数）
		float           4字节
		double     		8字节
		long double     12字节
		
		枚举类型
		enum  (c高级课程讲解)
		
	构造类型
		数组
		char [8];       8字节
		int [10];       40字节
		
		结构体
		struct (c高级课程讲解)
		
		共用体
		union  (c高级课程讲解)
	
	指针类型
		char *    4字节
		int *     4字节
		short *   4字节
		void *     4字节
	空类型
		void  
	

	2^10   =1Kb
	2^20   =1Mb
	2^30   =1Gb
	2^32   =4Gb
	
--------------------------------------------------------------------
PM：

【1】c语言中的变量
	 <变量类型> 变量名;

	1.变量名只能有数字，字母，下划线组成，并
	且不能以数字作为开头。
		rtc12  light_on  _abc   123adb X
		abc%123 X   abc$$tt X
	
	2.变量名不能和c语言中的关键字重复（32个）
		auto static extern volatile const register  6个
		char short int long float double enum struct union
		void signed unsigned                        12个
		typedef                                     1个
		sizeof                                      1个
		if  else switch case default do while for goto
		break return continue                       12个
		
	3.见名知意
	
	4.区分大小写

【2】常量
	字符常量
	 'a' 97  'b' 98  'c' 99
	 'A' 65  'B' 66   'C' 67
	 '0' 48   '\0' 0
	  man ascii   //查看ascii表的方法

	整型常量
		二进制
			0b11011011 
			= 1*2^7+1*2^6+0*2^5+1*2^4+1*2^3
			  +0*2^2+1*2^1+1*2^0 = 219;
			  
		八进制
			0664 = 6*8^2 + 6*8^1 + 4*8^0 = 436
				 = 0b110 110 100
			0775 = 7*8^2 + 7*8^1 + 5*8^0 
			     = 0b111 111 101
			0123 = 1*8^2 + 2*8^1 + 3*8^0 
			     = 0b 001 010 011
			
		十进制
			0 10 100 123  
			100 = 0b01 100 100 = 0144
			65  = 0b01 000 001 = 0101
			
		十六进制
			0 1 2 3 4 5 ... 9 A B C D E F
			0xaa = 0b10 101 010 = 0252
			0xff = 0b11 111 111 = 0377
			0x55 = 0b01 010 101 = 0125 
			
	实型常量
		3.14
		3.14e2
		-5.67E-2

	字符串常量(没有字符串类型)
		"helloworld"
		"i am happy"
	
	标识常量（宏）
		#define M 10   //后面没有分号

【3】printf的控制格式
	%c 		打印字符
	%d 		打印整数
	%ld		打印长整型
	%lld 	打印长长整型
	%#x     打印16进制并自动补充前缀
	%#o     打印八进制并自动补充前缀
	%f      打印浮点类型，默认小数点后六位
	%g      打印浮点类型，只显示有效位
	%e      打印浮点类型，以指数形式显示
	%.2f    打印浮点类型，显示小数点后两位
	%Lf     打印long double的浮点类型

【4】练习
	a = 5
	b = 10
	
	使用两个方式将a和b的值交换？
	
	
	
【5】修改自动补全的文件
linux@ubuntu:~/.vim/snippets$ vi c.snippets 
 70 snippet main
 71     #include <stdio.h>                                                                  
 72     
 73     int main(int argc, const char *argv[])
 74     {
 75 +---  2 lines: ${1}---------------------------------------------------------------------
 77     }
~              
	
	测试：随便打开一个.c文件，输入main,按下键盘的Tab
	上述的代码就自动出现了。

【6】数据类型的范围和存储方式
	char 
		1 000 1010
		| ->符号位，0正数，1负数
		
		取值范围：-128 - 127
		
		正数：
		0111 1111 = 127   
		1000 0000 = -128  最高位代表符号位，有代表数据位
	
	正数的源码，反码和补码都是它本身
	赋值：
	源码：1000 0000
	反码：除了符号位之外，其他位取反
		  1111 1111
	补码：在反码的基础上加1。
		  1000 0000
	
	在计算机上所有的数据都是以补码存放的。

	
	128：
		1000 0000  补码
		1111 1111  反码
		1000 0000  源码==>-128
	129:
		1000 0001?  补码
		1111 1110  反码
		1111 1111  源码==>-127
		
	130:
		1000 0010?  补码
		1111 1101?  补码
		1111 1110?  补码=>-126
		

	signed char    //有符号
	unsigned char  //无符号，最高不是符号，代表的是数据位
	取值范围：0-255


	short
	
	int
	
	


	